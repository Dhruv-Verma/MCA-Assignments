# -*- coding: utf-8 -*-
"""trainSpec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TS4awxP785p_EblxkdyvsLmZz9N6lM_J
"""

# Code credits: https://www.kaggle.com/anmour/svm-using-mfcc-features

import librosa
import numpy as np
import matplotlib.pyplot as plt
import os
import seaborn as sns
import pandas as pd
import pickle

from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

from sklearn.svm import SVC

print(os.getcwd())
os.chdir('drive/My Drive/Winter 2020/MCA/Homework-2/Noisy/')

os.chdir('Noisy/')

X = np.asarray(pickle.load(open('Training/specs_vector.pkl', 'rb')), dtype=float)
y = np.asarray(pickle.load(open('Training/labels.pkl', 'rb')), dtype=int)
X_test = np.asarray(pickle.load(open('Testing/specs_vector.pkl', 'rb')), dtype=float)
y_test = np.asarray(pickle.load(open('Testing/labels.pkl', 'rb')), dtype=int)

# Apply scaling for PCA
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_test_scaled = scaler.transform(X_test)

# Apply PCA for dimension reduction
pca = PCA(n_components=512).fit(X_scaled)
X_pca = pca.transform(X_scaled)
X_test_pca = pca.transform(X_test_scaled)

print(sum(pca.explained_variance_ratio_))

# Fit an SVM model
X_train, X_val, y_train, y_val = train_test_split(X_pca, y, test_size = 0.2, random_state = 0, shuffle = True)

model = SVC(kernel = 'rbf', probability=True, verbose=True)
model.fit(X_train, y_train)

print(accuracy_score(model.predict(X_val), y_val))

# Define the paramter grid for C from 0.001 to 10, gamma from 0.001 to 10
C_grid = [0.001, 0.01, 0.1, 1, 10]
gamma_grid = [0.001, 0.01, 0.1, 1, 10]
param_grid = {'C': C_grid, 'gamma' : gamma_grid}

grid = GridSearchCV(SVC(kernel='rbf'), param_grid, cv = 3, scoring = "accuracy")
grid.fit(X_train, y_train)

# Find the best model
print(grid.best_score_)

print(grid.best_params_)

print(grid.best_estimator_)

model = SVC(C=10, break_ties=False, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape='ovr', degree=3, gamma=0.001, kernel='rbf', max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False)
model.fit(X_pca, y)

pickle.dump(model, open('model_spec_noisy.pkl', 'wb'))

y_pred = model.predict(X_test_pca)    
print(classification_report(y_test, y_pred))